1. https://vuejs.org/v2/guide/installation.html 접속

2. _2 폴더를 실행하면 개발자 모드에서 console탭에 You are running Vue in development mode.(개발자 모드로 동작되고 있다는 메시지)
https://kr.vuejs.org/v2/guide/index.html


3. 이클립스 vue.js에서 사용하는 속성 이해하지 못해 오류 발생 없애는 방법
https://codedragon.tistory.com/2693

===== 용어정리 ======
(1) 마운트 : 배치할 요소와 애플리케이션을 연결하는 것을 의미합니다.
(2)  Vue.js는 DOM을 구축하는 방법으로 템플릿이라는 것을 주로 사용합니다.
     예로 <div v-if-"show">Hello Vue.js!</div>을 작성하면
      v-if라는 디렉티브를 이용해서 가상의 DOM을 만들기 위한 단순한 템플릿 기법입니다. 
     이러한 속성은 DOM에 반영되기 전에 Vue.js에 의해 컴파일되며 이후에 내부적으로만 사용됩니다.
(3) 데이터 바인딩 : 데이터와 렌더링을 동기화하는 구조를 데이터 바인딩이라고 부릅니다.
                자바스크립트 데이터와 이를 사용하는 위치를 연결해서 데이터에 변경이 있을 때 자동으로 DOM을 업데이트하는 기능입니다.
(4) 디렉티브 : 'v-'로 시작하는 속성을 의미하며 주고 데이터 바인딩과 관련된 처리를 실시합니다.
(5) 디렉티브의 값 : 자바스크립트 표현식
    예) <div key="id"></div>        =>  key속성에 id라는 값을 지정합니다. id는 단순한 문자열
    예) <div v-bind:key="id"></div> =>  v-로 시작하는 디렉티브이므로 값은 "id" 라는 자바스크립트 변수를 의미합니다. 즉, 애플리케이션에 등록되어 있는 데이터 전용 객체의 id라는 속성을 나타냅니다.
(6) Mustache 기법
    텍스트 콘텐츠의 해당 위치에 {{   }}를 사용하면 data 속성에 정의한 어떤 속성 값이 렌더링할 때 값을 바인딩해서 
   해당 위치에 값이 출력됩니다.
   <div id="app">
     {{ message }}
   </div>
  <!-- 개발버전, 도움되는 콘솔 경고를 포함. -->
  <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
  <script >
  var app = new Vue({
	  el: '#app',         //애플리케이션 인스턴스를 적용할 요소로 선택자 형태로 지정합니다.
	  data: {             //애플리케니션에서 사용할 데이터를 나타냅니다. 객체 또는 배열로 지정합니다.
	    message: '안녕하세요 Vue!'
	  }
	})
  </script>

(7) 라이프 사이클
    Vue.js는 라이프 사이클을 미리 등록해서 적절한 시기에 자동으로 호출합니다.
    이러한 시점을 낚어채서(Hook) 우리가 원하는 처리를 할 수 있게 하는 것을 훅(HOOK)이라고 부릅니다.

          메서드
      ①beforeCreate : 가장 먼저 실행됨, 인스턴스가 실행되고 리액티브 초기화가 일어 나기 전
      ②created : 인스턴스가 생성되고 리액티브 초기화가 일어난 후
                동영상강의)
                 뷰 컴포넌트내에서 competed, 다양한 메서드 만들기, watch를 이용한 특정한 데이터 감시,
                 data라는 옵션을 통해 화면상에 랜더링되는 바인딩 해야 될 데이터를 컨트롤 해야 되는 부분들을 
                 우리가 코드로 만들어서 사용하게 됩니다. 그래서 created 같은 경우는 
                이런 옵션들에 대한 설정을 완료하는 시점이라고 보면 됩니다. 
       ③ beforeMount : 인스턴스가 마운트 되기 전
                        동영상강의) 템플릿안에 HTML 코드가템플릿안에 HTML코드가 적혀있어요.
                                    컴포넌트가 돔에 추가되기 직전에 실행되는 것
       ④ mounted : 인스턴스가 마운트 된 후  
                    동영상강의)컴포넌트가 돔에 추가 된 후에 실행 되는 것
       ⑤ beforeUpdate : 데이터가 변경되어 돔에 적용되기 전
       ⑥ updated : 데이터가 변경되어 돔에 적용된 후
       ⑦ beforeDestroy : Vue 인스턴스가 제거 되기 전
                          동영상강의) 다른 컴포넌트로 이동할 때 또는 제거 되기 전
       ⑧ destroyed : Vue 인스턴스가 제거된 후
       ⑨ errorCaptured : 임의의 자식 컴포넌트에서 오류가 발생했을 때
       
(8) 훅(hook) : 뷰의 라이프 사이클 중 낚아채서 우리가 원하는 처리를 할 수 있게 하는 것을 훅이라고 합니다.
               //재정의 느낌인 듯(?)       
(9) 리액티브 시스템(reactive system)
     
  
   
4. _3/NewFile.jsp
첫 Vue 앱을 성공적으로 만들었습니다! 
이것은 문자열 템플릿을 렌더링하는 것과 매우 유사하지만, Vue.JS 내부에서는 더 많은 작업을 하고 있습니다. 이제 데이터와 DOM이 연결되었으며 모든 것이 반응형이 되었습니다. 
우리는 그것을 어떻게 확인할 수 있을까요? 브라우저의 JavaScript 콘솔을 열고 app.message를 다른 값으로 설정해 보십시오. 위 예제가 업데이트 변경된 값에 따라 업데이트되는 것을 볼 수 있습니다.
더 이상 HTML과 직접 상호작용할 필요가 없습니다. Vue 앱은 단일 DOM 요소(우리의 경우 #app)에 연결되어 DOM 요소를 완전히 제어합니다. HTML는 엔트리 포인트일뿐 다른 모든 것은 새롭게 생성된 Vue 인스턴스 내에서 발생합니다.

브라우저 콘솔 탭에서 작성하고 결과 확인해보세요
console.log(app.message)


5.  v-bind
첫 Vue 앱을 성공적으로 만들었습니다! 이것은 문자열 템플릿을 렌더링하는 것과 매우 유사하지만, 
Vue.JS 내부에서는 더 많은 작업을 하고 있습니다. 이제 데이터와 DOM이 연결되었으며 모든 것이 반응형이 되었습니다. 
우리는 그것을 어떻게 확인할 수 있을까요? 브라우저의 JavaScript 콘솔을 열고 app.message를 다른 값으로 설정해 보십시오. 
위 예제가 업데이트 변경된 값에 따라 업데이트되는 것을 볼 수 있습니다.

더 이상 HTML과 직접 상호작용할 필요가 없습니다. 
Vue 앱은 단일 DOM 요소(우리의 경우 #app)에 연결되어 DOM 요소를 완전히 제어합니다.
 HTML는 엔트리 포인트일뿐 다른 모든 것은 새롭게 생성된 Vue 인스턴스 내에서 발생합니다.

6. v-if
<div id="app-3">
  <p v-if="seen">이제 나를 볼 수 있어요</p>
</div>
var app3 = new Vue({
  el: '#app-3',
  data: {
    seen: true
  }
})

계속해서, Javascript 콘솔에 app3.seen = false를 입력하면, 메시지가 사라지는 것을 볼 수 있습니다.

이 예제는 텍스트와 속성뿐 아니라 DOM의 구조에도 데이터를 바인딩 할 수 있음을 보여줍니다. 또한 Vue 엘리먼트가 Vue에 삽입/업데이트/제거될 때 자동으로 트랜지션 효과를 적용할 수 있는 강력한 전환 효과 시스템을 제공합니다.

몇가지 디렉티브가 있습니다. 각 디렉티브마다 고유한 기능이 있습니다. 예를 들어 v-for 디렉티브는 배열의 데이터를 바인딩하여 Todo 목록을 표시하는데 사용할 수 있습니다.

7.v-for

<div id="app-4">
  <ol>
    <li v-for="todo in todos">
      {{ todo.text }}
    </li>
  </ol>
</div>
var app4 = new Vue({
  el: '#app-4',
  data: {
    todos: [
      { text: 'JavaScript 배우기' },
      { text: 'Vue 배우기' },
      { text: '무언가 멋진 것을 만들기' }
    ]
  }
})
콘솔에서, app4.todos.push({ text: 'New item' })을 입력하십시오. Todo 목록에 새 항목이 동적으로 추가 된것을 볼 수 있습니다.


8. v-on : 이벤트 핸들러
<div id="app-5">
  <p>{{ message }}</p>
  <button v-on:click="reverseMessage">메시지 뒤집기</button>
</div>
var app5 = new Vue({
  el: '#app-5',
  data: {
    message: '안녕하세요! Vue.js!'
  },
  methods: {
    reverseMessage: function () {
      this.message = this.message.split('').reverse().join('')
    }
  }
})

9. v-model
Vue는 또한 양식에 대한 입력과 앱 상태를 양방향으로 바인딩하는 v-model 디렉티브를 제공합니다.

<div id="app-6">
  <p>{{ message }}</p>
  <input v-model="message">
</div>
var app6 = new Vue({
  el: '#app-6',
  data: {
    message: '안녕하세요 Vue!'
  }
})

10. 컴포넌트 작성하기


======================== 기본적인 데이터 바인딩 =========================================
용어정리
(1) DOM 변경을 자동화하는 데이터 바인딩을 하려면 템플릿에서 사용하는 모든 데이터를 리액티브 데이터로 정의해야 합니다.
(2) 텍스트와 데이터 바인딩 : 별도의 태그를 사용할 필요 없이 중괄로를 사용하기만 하면 해당 위치에 텍스트 데이터가 출력됩니다.
                         이는 Mustache라고 부르는 기법으로 텍스트 콘텐츠의 행당 위치에 message 속성을 바인딩한다는 의미입니다.
                          mustache란 {{ }} 의 형태로 이루어진 탬플릿엔진이다.
  예)<div id="app">
      {{message}}
    </div>
 (3)랜더링이란 HTML,CSS,JavaScript 등 개발자가 작성한 문서를 브라우저에서 그래픽 형태로 출력하는 과정을 말한다.   